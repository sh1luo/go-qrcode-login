package v1

import (
	"github.com/gin-gonic/gin"
	"github.com/sh1luo/go-qrcode-login.git/global"
	"github.com/sh1luo/go-qrcode-login.git/internal/service"
	"github.com/sh1luo/go-qrcode-login.git/pkg/app"
	"github.com/sh1luo/go-qrcode-login.git/pkg/errcode"
	"github.com/sh1luo/go-qrcode-login.git/pkg/gredis"
	"log"
)

//GetQrcode will parse the "possibly unique identification code"
//generated by the client from the query string, add the time stamp of the server's current time,
//generate a new string after base64 encoding, and return it to the QR code To the client.
func GetQrcode(c *gin.Context) {
	// dvID := c.Param("deviceID")
	svc := service.NewService(c.Request.Context())
	response := app.NewResponse(c)

	// 根据生成的唯一字符串生成二维码
	token := svc.TokenID(16)
	imgBytes, err := svc.GetQrCode(token)
	if err != nil {
		response.ToErrResponse(err)
		return
	}

	// 设置二维码过期时间
	e := gredis.Set(token, 1, global.JwtSetting.QrCodeExpire)
	if e != nil {
		response.ToErrResponse(errcode.ServerInternalErr)
		log.Printf("redis添加k-v错误:%s", err)
		return
	}

	response.ToDataResponse("image/jpeg", imgBytes)
}

// GetQrCodeStatus will receive a unique identification of a QR code,
// and return the status of the specified QR code,including :
// QrCodeExist   - 110000,
// QrCodeExpired - 110001,
// QrCodeScanned - 110001,
func GetQrCodeStatus(c *gin.Context) {

}

//LoginByQrcode
func LoginByQrcode(c *gin.Context) {
	qrc := c.Param("qrcode")
	token := c.PostForm("token")
	response := app.NewResponse(c)
	if len(qrc) == 0 || len(token) == 0 {
		response.ToErrResponse(errcode.InvalidParams)
		return
	}

	id := gredis.GetAnyInt(token)
	// 用户未登录
	if id <= 0 {
		response.ToErrResponse(errcode.AppFailed)
		return
	}

	// 获取二维码的状态
	b := gredis.Exist(qrc)
	if b == false {
		response.ToErrResponse(errcode.QrCodeExpired)
		return
	}

	svc := service.NewService(c.Request.Context())
	// var au model.Auth
	au, err := svc.Dao.GetAccountByID(uint(id))
	if err != nil {
		response.ToErrResponse(errcode.ServerInternalErr)
		log.Printf("svc.Dao.GetAccountByID(uint(id)) err: %s", err)
		return
	}

	response.ToJsonResponse(errcode.Success.AddParams(au.AppKey))
}
